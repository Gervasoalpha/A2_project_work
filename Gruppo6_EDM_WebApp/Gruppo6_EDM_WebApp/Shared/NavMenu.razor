@inject IAuthenticationService AuthenticationService
@inherits OwningComponentBase<AuthenticationState>

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">EDM</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        @if (AuthenticationState.User.Identity.IsAuthenticated)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="/codice" Match="NavLinkMatch.All">
                    <span class="oi oi-lock-unlocked" aria-hidden="true"></span> Apertura Porte
                </NavLink>
            </div>
        }
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : "";

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationService.GetAuthenticationStateAsync();
        AssignContext(authState);
    }

    private void AssignContext(AuthenticationState authState)
    {
        AuthenticationState = authState;
    }

    public AuthenticationState AuthenticationState { get; set; }
}
