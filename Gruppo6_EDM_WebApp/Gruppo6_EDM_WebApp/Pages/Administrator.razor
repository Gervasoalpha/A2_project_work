@page "/administrator"
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient HttpClient
@inject ILocalStorageService localStorage

@if (isLoading)
{
    <p>Loading...</p>
}
else
{
 
    <div class="position-relative">
        <h4 class="position-absolute top-50 start-50 translate-middle">Users</h4>
    </div><br />
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Surname</th>
                <th>Username</th>
                <th>Email</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in users)
            {
                <tr>
                    <td>@user.name</td>
                    <td>@user.surname</td>
                    <td>@user.username</td>
                    <td>@user.email</td>
                </tr>
            }
        </tbody>
    </table>
}

<div class="position-relative">
    <h4 class="position-absolute top-50 start-50 translate-middle">Pics</h4>
</div>
<br />
<table class="table">
    <thead>
        <tr>
            <th>Port Number</th>
            <th>Building Number</th>
            <th>Status</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var pic in pics)
        {
            <tr>
                <td>@pic.port_number</td>
                <td>@pic.buildingnumber</td>
                <td>@pic.status</td>
            </tr>
        }
    </tbody>
</table>

<div class="position-relative">
    <h4 class="position-absolute top-50 start-50 translate-middle">Raspberries</h4>
</div>
<br />
<table class="table">
    <thead>
        <tr>
            <th>Building Number</th>
            <th>Building Name</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var raspberry in raspberries)
        {
            <tr>
                <td>@raspberry.buildingnumber</td>
                <td>@raspberry.buildingname</td>
            </tr>
        }
    </tbody>
</table>

<div class="position-relative">
    <h4 class="position-absolute top-50 start-50 translate-middle">Logs</h4>
</div>
<br />
<table class="table">
    <thead>
        <tr>
            <th>Id</th>
            <th>Auth Code</th>
            <th>Unlock Code</th>
            <th>Opened</th>
            <th>Username</th>
            <th>Numero Porta</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var log in logs)
        {
            <tr>
                <td>@log.id</td>
                <td>@log.authcode</td>
                <td>@log.unlockcode</td>
                <td>@log.opened</td>
                <td>@log.username</td>
                <td>@log.portnumber</td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<UserDto> users = new List<UserDto>();
    private List<PicDto> pics = new List<PicDto>();
    private List<RaspberryDto> raspberries = new List<RaspberryDto>();
    private List<LogDto> logs = new List<LogDto>();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;
        if (authenticationState.User.Identity.IsAuthenticated)
        {
            string authToken = await localStorage.GetItemAsync<string>("authToken");
            if (!string.IsNullOrEmpty(authToken))
            {
                HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", authToken);
                await LoadDataAsync();
                isLoading = false;
            }
        }
    }

    private async Task LoadDataAsync()
    {
        users = await GetUsersAsync();
        pics = await GetPicsAsync();
        raspberries = await GetRaspberriesAsync();
        logs = await GetLogsAsync();
    }

    private async Task<List<UserDto>> GetUsersAsync()
    {
        var response = await HttpClient.GetAsync("https://gruppo6-webapp.azurewebsites.net/api/Users");
        response.EnsureSuccessStatusCode();
        var users = await response.Content.ReadFromJsonAsync<List<UserDto>>();
        return users;
    }

    private async Task<List<PicDto>> GetPicsAsync()
    {
        var response = await HttpClient.GetAsync("https://gruppo6-webapp.azurewebsites.net/api/Pics");
        response.EnsureSuccessStatusCode();
        var pics = await response.Content.ReadFromJsonAsync<List<PicDto>>();
        return pics;
    }

    private async Task<List<RaspberryDto>> GetRaspberriesAsync()
    {
        var response = await HttpClient.GetAsync("https://gruppo6-webapp.azurewebsites.net/api/Raspberries");
        response.EnsureSuccessStatusCode();
        var raspberries = await response.Content.ReadFromJsonAsync<List<RaspberryDto>>();
        return raspberries;
    }

    private async Task<List<LogDto>> GetLogsAsync()
    {
        var response = await HttpClient.GetAsync("https://gruppo6-webapp.azurewebsites.net/api/Logs");
        response.EnsureSuccessStatusCode();
        var logs = await response.Content.ReadFromJsonAsync<List<LogDto>>();
        return logs;
    }

    public class UserDto
    {
        public string name { get; set; }
        public string surname { get; set; }
        public string username { get; set; }
        public string password { get; set; }
        public string email { get; set; }
        public string id { get; set; }
    }

    public class PicDto
    {
        public int port_number { get; set; }
        public int buildingnumber { get; set; }
        public bool status { get; set; }
        public string id { get; set; }
    }

    public class RaspberryDto
    {
        public int buildingnumber { get; set; }
        public string buildingname { get; set; }
        public string id { get; set; }
    }

    public class LogDto
    {
        public int authcode { get; set; }
        public int unlockcode { get; set; }
        public bool opened { get; set; }
        public string username { get; set; }
        public int portnumber { get; set; }
        public int id { get; set; }
    }
}